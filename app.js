// tma-access/app.js

document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;
    // --- –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏ –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π URL —Ç–≤–æ–µ–≥–æ API ---
    const API_BASE_URL = "https://silver-bugs-smile.loca.lt"; 

    // --- –≠–ª–µ–º–µ–Ω—Ç—ã DOM ---
    const loaderEl = document.getElementById('loader');
    const mainContentEl = document.getElementById('main-content');
    const userGreetingEl = document.getElementById('user-greeting');
    const userStatusEl = document.getElementById('user-status');
    const userTrafficEl = document.getElementById('user-traffic');
    const userExpiresEl = document.getElementById('user-expires');
    const serverListEl = document.getElementById('server-list');
    const tariffListEl = document.getElementById('tariff-list');

    tg.ready();
    tg.expand();

    // --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API ---
    async function apiFetch(endpoint, options = {}) {
        try {
            const response = await fetch(`${API_BASE_URL}${endpoint}`, {
                ...options,
                headers: { ...options.headers, 'Authorization': `Bearer ${tg.initData}`, 'Bypass-Tunnel-Reminder': 'true'}
            });
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`API Error ${response.status}: ${errorText}`);
            }
            const result = await response.json();
            if (!result.ok) {
                throw new Error(`API Logic Error: ${result.error}`);
            }
            return result.data;
        } catch (error) {
            console.error("Fetch failed:", error);
            throw error; // –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
        }
    }

    // --- –§—É–Ω–∫—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ ---
    function renderUserInfo(db_user, marzban_user) {
        userGreetingEl.innerText = `üëã –ü—Ä–∏–≤–µ—Ç, ${db_user.full_name}!`;
        
        if (marzban_user.status === 'active') {
            userStatusEl.innerText = '–ê–∫—Ç–∏–≤–Ω–∞';
            userStatusEl.style.color = 'var(--tg-theme-link-color, #2481cc)'; // –ó–µ–ª–µ–Ω—ã–π –∏–ª–∏ —Å–∏–Ω–∏–π
        } else {
            userStatusEl.innerText = '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
            userStatusEl.style.color = 'var(--tg-theme-destructive-text-color, #ef5350)'; // –ö—Ä–∞—Å–Ω—ã–π
        }
        
        const usedGb = (marzban_user.used_traffic / (1024**3)).toFixed(2);
        const limitGb = marzban_user.data_limit > 0 ? (marzban_user.data_limit / (1024**3)).toFixed(0) : '‚àû';
        userTrafficEl.innerText = `${usedGb} / ${limitGb} GB`;

        if (marzban_user.expire && marzban_user.expire > 0) {
            const expireDate = new Date(marzban_user.expire * 1000);
            userExpiresEl.innerText = expireDate.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' });
        } else {
            userExpiresEl.innerText = '–ë–µ—Å—Å—Ä–æ—á–Ω–æ';
        }
    }

    function renderServers(servers) {
        if (servers.length === 0) {
            serverListEl.innerHTML = '<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö.</p>';
            return;
        }
        servers.forEach(server => {
            const p = document.createElement('p');
            const statusEmoji = server.status === 'online' ? 'üü¢' : 'üî¥';
            p.innerHTML = `${statusEmoji} ${server.name} - <b>–ó–∞–≥—Ä—É–∑–∫–∞: ${server.load_avg_1m !== null ? (server.load_avg_1m * 100).toFixed(0) + '%' : 'N/A'}</b>`;
            serverListEl.appendChild(p);
        });
    }

    function renderTariffs(tariffsData) {
        if (tariffsData.tariffs.length === 0) {
            tariffListEl.innerHTML = '<p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤.</p>';
            return;
        }
        tariffsData.tariffs.forEach(tariff => {
            const btn = document.createElement('button');
            btn.innerText = `${tariff.name} - –æ—Ç ${tariff.options[0].price} ${tariff.options[0].currency}`;
            btn.onclick = () => {
                // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
                tg.showAlert(`–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ "${tariff.name}"`);
            };
            tariffListEl.appendChild(btn);
        });
    }

    // --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
    async function main() {
        try {
            const [userInfo, serversStatus, tariffs] = await Promise.all([
                apiFetch('/api/user/info', { method: 'POST' }),
                apiFetch('/api/servers/status'),
                apiFetch('/api/tariffs/list')
            ]);
            
            renderUserInfo(userInfo.db_user, userInfo.marzban_user);
            renderServers(serversStatus);
            renderTariffs(tariffs);

            mainContentEl.classList.remove('hidden');
            loaderEl.classList.add('hidden');
        } catch (error) {
            loaderEl.innerHTML = `<h2>üö´ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2><p style="color: var(--tg-theme-hint-color);">${error.message}</p>`;
            tg.showAlert(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`);
        }
    }
    
    main();
});
